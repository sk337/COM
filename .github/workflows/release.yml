name: Cross-Platform Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  PROJECT_NAME: dosdisassm

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set version from tag or commit
        id: setver
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  build-linux:
    needs: set-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm ruby ruby-dev build-essential
          sudo gem install --no-document fpm

      - name: Build
        run: cargo build --release

      - name: Package files
        run: |
          mkdir -p dist
          cp target/release/${{ env.PROJECT_NAME }} dist/

          zip -j ${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-linux-x86_64-portable.zip dist/*
          tar czvf ${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-linux-x86_64-portable.tar.gz -C dist .

          fpm -s dir -t deb -n ${{ env.PROJECT_NAME }} -v 1.0.0 --architecture amd64 --prefix /usr/local/bin dist/${{ env.PROJECT_NAME }}
          mv ${{ env.PROJECT_NAME }}_1.0.0_amd64.deb ${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-linux-x86_64.deb

          fpm -s dir -t rpm -n ${{ env.PROJECT_NAME }} -v 1.0.0 --architecture amd64 --prefix /usr/local/bin dist/${{ env.PROJECT_NAME }}
          mv ${{ env.PROJECT_NAME }}-1.0.0-1.x86_64.rpm ${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-linux-x86_64.rpm

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            *.zip
            *.tar.gz
            *.deb
            *.rpm

  build-windows:
    needs: set-version
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Build
        run: cargo build --release

      - name: Generate portable ZIP
        run: |
          mkdir dist
          copy target\release\${{ env.PROJECT_NAME }}.exe dist\
          powershell Compress-Archive -Path dist\* -DestinationPath $env:PROJECT_NAME-${{ needs.set-version.outputs.version }}-windows-x64-portable.zip

      - name: Create installer with Inno Setup
        run: |
          $env:VERSION="${{ needs.set-version.outputs.version }}"
          iscc installer.iss
          rename-item -Path dosdisassm-setup.exe -NewName "${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-windows-x64-setup.exe"

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            *.zip
            *.exe

  build-macos:
    needs: set-version
    strategy:
      matrix:
        arch: [x86_64-apple-darwin, aarch64-apple-darwin]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install target
        run: rustup target add ${{ matrix.arch }}

      - name: Build
        run: cargo build --release --target ${{ matrix.arch }}

      - name: Package
        run: |
          mkdir -p dist
          cp target/${{ matrix.arch }}/release/${{ env.PROJECT_NAME }} dist/
          zip -j ${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-macos-${{ matrix.arch == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}.zip dist/*

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: |
            *.zip

  release:
    needs: [build-linux, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts
        run: find artifacts -type f -exec mv {} . \;

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.zip
            *.tar.gz
            *.deb
            *.rpm
            *.exe
