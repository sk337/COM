name: Cross-Platform Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  PROJECT_NAME: dosdisassm

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set version from tag or commit
        id: setver
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  validate-version:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Extract current tag
        id: tag
        run: |
          TAG="${GITHUB_REF#refs/tags/v}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest previous tag
        id: latest
        run: |
          PREV=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v "${{ steps.tag.outputs.tag }}" | head -n1)
          echo "prev=${PREV#v}" >> "$GITHUB_OUTPUT"

      - name: Ensure new tag is greater than previous tag
        run: |
          NEW=${{ steps.tag.outputs.tag }}
          OLD=${{ steps.latest.outputs.prev }}
          if [ -n "$OLD" ] && [ "$(printf '%s\n' "$NEW" "$OLD" | sort -V | tail -n1)" != "$NEW" ]; then
            echo "❌ New version ($NEW) is not greater than previous version ($OLD)"
            exit 1
          fi

      - name: Validate Cargo.toml versions match tag
        run: |
          EXPECTED="${{ steps.tag.outputs.tag }}"
          FILES=$(find . -name Cargo.toml)
          for FILE in $FILES; do
            VERSION=$(grep '^version *= *"' "$FILE" | head -n1 | sed 's/.*"\(.*\)".*/\1/')
            if [ "$VERSION" != "$EXPECTED" ]; then
              echo "❌ Version mismatch in $FILE (found: $VERSION, expected: $EXPECTED)"
              exit 1
            else
              echo "✅ $FILE version matches $EXPECTED"
            fi
          done

  build-linux:
    needs: [validate-version, set-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm ruby ruby-dev build-essential libfuse2
          sudo gem install --no-document fpm

      - name: Cache cargo registry and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release

      - name: Install AppImage tooling
        run: |
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/cb0115379a3c03ea9ec13cebf8afc4f27eb1cf6b/download/appimagetool-x86_64.AppImage
          chmod +x appimagetool

      - name: Prepare AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          cp target/release/dosdisassm AppDir/usr/bin/
          cp assets/icon.png AppDir/icon.png

          cat > AppDir/dosdisassm.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=DosDisassm
          Exec=dosdisassm
          Icon=icon
          Categories=Utility;
          EOF

      - name: Build AppImage
        run: |
          ./appimagetool AppDir
          mv DosDisassm*.AppImage dosdisassm-${{ needs.set-version.outputs.version }}-linux-x86_64.AppImage

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: appimage
          path: dosdisassm-${{ needs.set-version.outputs.version }}-linux-x86_64.AppImage

      - name: Package files
        run: |
          mkdir -p dist
          cp target/release/${{ env.PROJECT_NAME }} dist/

          zip -j ${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-linux-x86_64-portable.zip dist/*
          tar czvf ${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-linux-x86_64-portable.tar.gz -C dist .

          fpm -s dir -t deb -n ${{ env.PROJECT_NAME }} -v ${{ needs.set-version.outputs.version }} --architecture amd64 --prefix /usr/local/bin dist/${{ env.PROJECT_NAME }}

          fpm -s dir -t rpm -n ${{ env.PROJECT_NAME }} -v ${{ needs.set-version.outputs.version }} --architecture amd64 --prefix /usr/local/bin dist/${{ env.PROJECT_NAME }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            *.zip
            *.tar.gz
            *.deb
            *.rpm

  build-windows:
    needs: [validate-version, set-version]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Cache cargo registry and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release

      - name: Generate portable ZIP
        run: |
          mkdir dist
          copy target\release\${{ env.PROJECT_NAME }}.exe dist\
          powershell Compress-Archive -Path dist\* -DestinationPath $env:PROJECT_NAME-${{ needs.set-version.outputs.version }}-windows-x64-portable.zip

      - name: Create installer with Inno Setup
        run: |
          $env:VERSION="${{ needs.set-version.outputs.version }}"
          iscc installer.iss
          rename-item -Path dosdisassm-setup.exe -NewName "${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-windows-x64-setup.exe"

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            *.zip
            *.exe

  build-macos:
    needs: [validate-version, set-version]
    strategy:
      matrix:
        arch: [x86_64-apple-darwin, aarch64-apple-darwin]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install target
        run: rustup target add ${{ matrix.arch }}

      - name: Install Xcode Command Line Tools
        run: |
          if ! command -v SetFile >/dev/null; then
            echo "Installing Xcode Command Line Tools..."
            xcode-select --install || true
            sleep 30
          fi

      - name: Cache cargo registry and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release --target ${{ matrix.arch }}

      - name: Create DMG
        run: |
          mkdir -p dmg-root
          cp target/${{ matrix.arch }}/release/${{ env.PROJECT_NAME }} dmg-root/
          ln -s /Applications dmg-root/Applications
          cp assets/icon.icns dmg-root/.VolumeIcon.icns
          SetFile -a C dmg-root
          hdiutil create ${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-macos-${{ matrix.arch == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}.dmg -volname "${{ env.PROJECT_NAME }}" -srcfolder dmg-root -ov -format UDZO

      - name: Package
        run: |
          mkdir -p dist
          cp target/${{ matrix.arch }}/release/${{ env.PROJECT_NAME }} dist/
          zip -j ${{ env.PROJECT_NAME }}-${{ needs.set-version.outputs.version }}-macos-${{ matrix.arch == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}.zip dist/*

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: |
            *.zip
            *.dmg

  release:
    needs: [build-linux, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts
        run: find artifacts -type f -exec mv {} . \;

      - name: Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "$GPG_PRIVATE_KEY_PASSWORD" | gpg --batch --yes --passphrase-fd 0 --edit-key "$GPG_KEY_ID" trust quit

        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PRIVATE_KEY_PASSWORD: ${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Create checksums and manifest
        run: |
          mkdir -p signatures
          {
            echo "Release: ${{ github.ref }}"
            echo ""
            echo "Files:"
            echo ""
            for FILE in *.zip *.tar.gz *.deb *.rpm *.exe *.AppImage *.dmg; do
              [ -f "$FILE" ] || continue
              SHA256=$(sha256sum "$FILE" | cut -d' ' -f1)
              SIZE=$(stat -c%s "$FILE")
              echo "$FILE ($SIZE bytes):"
              echo "  SHA256: $SHA256"
              echo ""
            done
          } > signatures/RELEASE-MANIFEST.txt

      - name: Sign the manifest
        run: |
          gpg --batch --yes --armor --output signatures/RELEASE-MANIFEST.txt.asc --detach-sign signatures/RELEASE-MANIFEST.txt

      - name: Upload signed manifest
        uses: actions/upload-artifact@v4
        with:
          name: release-signatures
          path: signatures/*

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.zip
            *.tar.gz
            *.deb
            *.rpm
            *.exe
            *.AppImage
            *.dmg
            signatures/*
